1(a)Write a LEX program to recognize valid arithmetic expression. Identifiers in the expression could be only integers and operators could be + and *. Count the identifiers & operators present and print them separately.
%{
#include<stdio.h>
#include<string.h>
int nooper=0,nooperand=0,top=0,i=0,j=0,tnooper=0,tnoopnd=0,valid=0;
char opnd[10][10],opert[10][10];
%}
%%
"(" { valid =1;}
")" { valid=0;}
"+"|"*" {nooper++; strcpy(opert[i],yytext);i++;}
[0-9]+ {nooperand++; strcpy(opnd[j],yytext);j++;}
[^+*]"("[^0-9] YYFAIL();
%%
int main()
{
int k;
printf("Enter the expression\n");
yylex();
if(valid==0 &&(nooperand-nooper)==1)
{
printf("The exp is valid\n");
printf("The operator are\n");
for(k=0;k<i;k++)
printf("%s\n",opert[k]);
printf("The operands are\n");
for(k=0;k<j;k++)
printf("%s\n",opnd[k]);
}
else{
printf("The exp is invalid");
return 0;
}
}
int YYFAIL()
{
printf("Invalid");
exit(0);
}

/* OUTPUT
[root@localhost ss]# lex 1a.l
[root@localhost ss]# cc lex.yy.c -ll
[root@localhost ss]# ./a.out
Enter the expression
2+3*4
The exp is valid
The operator are
+
*
The operands are
2
3
4
[root@localhost ss]# ./a.out
enter the expression
(2+3)()
Invalid[root@localhost ss]# ./a.out
Enter the expression
(2+3)*()
The exp is invalid
[root@localhost ss]# ./a.out
Enter the expression
((2+3)*(4+5))
The exp is valid
The operator are
+
*
+
The operands are
2
3
4
5


1(b) Write YACC program to evaluate arithmetic expression involving operators: +, -, *, and /
LEX PART
%{
#include "y.tab.h"
#include <stdlib.h>
extern int yylval;
%}
%%
[0-9]+ {yylval=atoi(yytext);
return NUM;}
\n {return 0;}
. {return yytext[0];}
%%
YACC PART
%{
#include<stdio.h>
int valid=1;
%}
%token NUM
%left '+' '-'
%left '*' '/'
%%
Stmt:expr{if(valid)
{
printf("Result=%d\n",$$);}
}
expr:expr'+'expr {$$=$1+$3;}
|expr'-'expr {$$=$1-$3;}
|expr'*'expr {$$=$1*$3;}
|expr'/'expr {if($3==0){
valid=0;printf("Divide by zero error\n");}
else
$$=$1/$3;}
|'('expr')' {$$=$2;}
|NUM {$$=$1;}
;
%%
main()
{
printf("Enter arithmetic exression:\n");
yyparse();
if(valid==1)
printf("Expression is valid\n");
}
int yyerror()
{
printf("Invalid expression\n");
exit(0);
}

 OUTPUT
[root@localhost ss]# lex 1b.l
[root@localhost ss]# yacc -d 1b.y
[root@localhost ss]# cc lex.yy.c y.tab.c -ll
[root@localhost ss]# ./a.out
Enter arithmetic exression:
2+3*6
Result=20
Expression is valid
[root@localhost ss]# ./a.out
Enter arithmetic exression:
2+3/0
Divide by zero error
[root@localhost ss]# ./a.out
Enter arithmetic exression:
(2*8)/2
Result=8
Expression is valid
