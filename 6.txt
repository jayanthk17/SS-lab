6(a) Write a LEX program to eliminate comment lines in a C program and copy the resulting program into a separate file.
%{
#include<stdio.h>
int com=0;
%}
%%
"//".* {com++;}
"/*"([^*]|\*+[^*/])*\*+"/" {com++;}
.|\n {fprintf(yyout,"%s",yytext);}
%%
void main(int argc, char *argv[])
{
yyin=fopen(argv[1],"r");
yyout=fopen(argv[2],"w");
yylex();
printf("No of comment lines=%d\n",com);
}
 OUTPUT
[root@localhost ss]# lex 6a.l
[root@localhost ss]# cc lex.yy.c -ll
[root@localhost ss]# ./a.out comin.c comout.c
No of comment lines=5
[root@localhost ss]# cat comout.c
#include<stdio.h>
void main()
{
int a,b,c;
a= b+c;
}
[root@localhost ss]# gedit comin.c
//welcome to BIT
#include<stdio.h>
/* Main begins
*/
void main()
{
// declaration
int a,b,c; // integer types
a= b+c;
/* *************
********nmm,,*/
}


6(b) Write YACC program to recognize valid identifier, operators and keywords in the given text (C program) file.
LEX PART
%{
#include <stdio.h>
#include "y.tab.h"
%}
%%
int|char|bool|float|void|for|do|while|if|else|return|void|main {printf("keyword is %s\n",yytext);return KEY;}
[+|-|*|/|=|<|>] {printf("operator is %s\n",yytext);return OP;}
[a-zA-Z][_a-zA-Z0-9]* {printf("identifier is %s\n",yytext);return ID;}
. ;
%%
YACC PART
%{
#include <stdio.h>
#include <stdlib.h>
int id=0, key=0, op=0;
%}
%token ID KEY OP
%%
input: ID input { id++; }
| KEY input { key++; }
| OP input {op++;}
| ID { id++; }
| KEY { key++; }
| OP { op++;}
;
%%
extern FILE *yyin;
void main(int argc ,char** argv)
{
yyin = fopen(argv[1],"r");
yyparse();
printf("Keywords = %d\nIdentifiers = %d\noperators = %d\n", key,id, op);
}
void yyerror()
{
printf("Not valid");
}

 OUTPUT
[root@localhost ss]# gedit 6bin.c
void main()
{
int a,b,c;
p= q+r;
m = k + t;
}
[root@localhost ss]# lex 6b.l
[root@localhost ss]# yacc -d 6b.y
[root@localhost ss]# cc lex.yy.c y.tab.c -ll
[root@localhost ss]# ./a.out 6bin.c
keyword is void
keyword is main
keyword is int
identifier is a
identifier is b
identifier is c
identifier is p
operator is =
identifier is q
operator is +
identifier is r
identifier is m
operator is =
identifier is k
operator is +
identifier is t
Keywords = 3
Identifiers = 9
operators = 4
